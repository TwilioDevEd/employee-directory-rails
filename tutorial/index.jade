.chapter(data-title='Warm Transfer Rails')
  .step(
    data-title='What Are We Building?',
    data-file='config/routes.rb')
    :markdown
      ## Employee Directory

      ![Employee Directory](//howtodocs.s3.amazonaws.com/employee-directory.png)

      Learn how to implement an employee directory that you can query using SMS.
      Request information from anyone at your company just by sending a text message
      to a [Twilio Number](//www.twilio.com/help/faq/phone-numbers)

      Here is how it works at a high level:

      1. We configure one of our Twilio numbers to make a request to our server when an SMS is received.

      1. The user sends a SMS with an employee's name, last name or both to the Twilio number.

      1. If an exact match is found, the employee's information is returned.
      
      1. If no exact match is found, the user is given a list of employee suggestions to pick from.

      1. The user reply's with a number to get the complete information from the selected employee.

      Let's get started!

      ---

      **See Also:**
      * [Getting Started with Ruby on Rails](http://guides.rubyonrails.org/getting_started.html)
      * [Getting started with the Twilio Ruby gem](//twilio-ruby.readthedocs.org/en/latest/index.html#getting-started)

  .step(
    data-title="Setting Up the SMS Web Hook",
    data-file='config/routes.rb',
    data-highlight='2')
    :markdown
      ## Setting Up the SMS Web Hook

      You will need to configure the SMS webhook of the Twilio number where clients
      will send SMS asking for employee information.
      ![Configure SMS](//howtodocs.s3.amazonaws.com/twilio-number-config-all-med.gif)

      You need to expose your localhost using a tool like [ngrok](//ngrok.com/).
      Now your SMS URL should look something like this:

      ```
      https://<subdomain>.ngrok.io/directory/search
      ```
      
      Make sure you select `POST` as the request type when setting your URL. This
      is the method the application uses by default.
      
  .step(
    data-title="Handling Twilio's SMS Request",
    data-file='app/controllers/directory_controller.rb',
    data-highlight='4-10')
    :markdown
      ## Handling Twilio's SMS Request
      
      When a SMS is received in your [Twilio Number](//www.twilio.com/help/faq/phone-numbers),
      Twilio will make a POST
      request to `/directory/search` asking for [TwiML]
      instructions.

      Once the application identifies one of the 4 possible scenarios
      (exact match, single partial match, multiple partial match or no match),
      it will send a [TwiML] response to Twilio. This response will instruct Twilio
      to send a SMS [Message](//www.twilio.com/docs/api/twiml/sms/message)
      back to the user who sent the first SMS.
      
      Let's take a closer look to each one of the scenarios.
      
      [TwiML]: //www.twilio.com/docs/api/twiml
      
  .step(
    data-title="Finding an Exact Match",
    data-file='lib/matchers/perfect_match.rb',
    data-highlight='2-10')
    :markdown
      ## Finding an Exact Match
      
      This is the simplest scenario. We query our database expecting to find an
      employee whose first and last name are exactly the ones we specified in the SMS
      that was sent to our Twilio number. If a match is found, a message containing
      this employee's information is built and sent to Twilio as TwiML instructions.
      
      If no match is found we'll try to do a single partial match, that is our
      next possible scenario.
      
      ---

      **See Also:**
      * [How we iterate over possible matching scenarios](//github.com/TwilioDevEd/employee-directory-rails/blob/c02c9e234e2bbc337c09404e2234138f3f59f02b/lib/employee_finder.rb)

  .step(
    data-title="Finding a Single Partial Match",
    data-file='lib/matchers/single_partial_match.rb',
    data-highlight='2-11')
    :markdown
      ## Finding a Single Partial Match
      
      If no employee exact match is found on the database we'll try to find a close
      one using the [Fuzzily Gem](//github.com/mezis/fuzzily). In this scenario
      we'll verify that only 1 partial match is obtained. When a single partial match
      is found, the user will receive a suggestion of the found partial match. The
      user will also be given the opportunity to reply with the word `yes` to this
      SMS. If that were the case, the user will receive the full information for the
      user that was originally suggested.
      
      ---

      **See Also:**
      * [Fuzzily Gem Usage](//github.com/mezis/fuzzily#usage)

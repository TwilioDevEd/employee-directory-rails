.chapter(data-title='Employee Directory Rails')
  .step(
    data-title='What Are We Building?',
    data-file='config/routes.rb')
    :markdown
      ## Employee Directory

      Learn how to implement an employee directory that you can query using SMS.
      Request information from anyone at your company just by sending a text message
      to a [Twilio Number](//www.twilio.com/help/faq/phone-numbers)

      Here is how it works at a high level:

      - The user sends a SMS with an Employee's name to the Twilio number.
      - The user receives information for the requested Employee.

      Let's get started!

      ---

      **See Also:**
      * [Getting Started with Ruby on Rails](http://guides.rubyonrails.org/getting_started.html)
      * [Getting started with the Twilio Ruby gem](//twilio-ruby.readthedocs.org/en/latest/index.html#getting-started)

  .step(
    data-title="Handling Twilio's SMS Request",
    data-file='app/controllers/directory_controller.rb',
    data-highlight='4-10')
    :markdown
      ## Handling Twilio's SMS Request

      When your [Twilio Number](//www.twilio.com/help/faq/phone-numbers) receives
      an SMS, Twilio will make a POST request to `/directory/search` asking for [TwiML]
      instructions.

      Once the application identifies one of the 4 possible scenarios
      (exact match, single partial match, multiple partial match or no match),
      it will send a [TwiML] response to Twilio. This response will instruct Twilio
      to send an SMS [Message](//www.twilio.com/docs/api/twiml/sms/message)
      back to the user.

      Let's take a closer look to each one of the scenarios.

      [TwiML]: //www.twilio.com/docs/api/twiml

  .step(
    data-title="Exact Match",
    data-file='lib/matchers/perfect_match.rb',
    data-highlight='2-10')
    :markdown
      ## Finding an Exact Employee Match

      This is the simplest scenario. We query our database expecting to find an
      employee whose first and last name are exactly like the ones we specified in the SMS
      that was sent to our Twilio number. If a match is found, a message containing
      this employee's information is built and sent to Twilio as TwiML instructions.

      If no match is found we'll try to do a single partial match. That is our
      next possible scenario.

      ---

      **See Also:**
      * [How we iterate over possible matching scenarios](//github.com/TwilioDevEd/employee-directory-rails/blob/c02c9e234e2bbc337c09404e2234138f3f59f02b/lib/employee_finder.rb)

  .step(
    data-title="Single Partial Match",
    data-file='lib/matchers/single_partial_match.rb',
    data-highlight='2-11')
    :markdown
      ## Finding a Single Partial Employee Match

      If no employee's exact match is found on the database we'll try to find a close
      match using [Fuzzily Gem](//github.com/mezis/fuzzily). In this scenario
      we'll verify that only 1 partial match is obtained. When a single partial match
      is found, the user will receive a suggestion containing it. The
      user will be given the opportunity to reply with the word `yes` to this
      SMS. If that were the case, the user will receive the information for the
      employee that was chosen.

      We'll show you how the suggestions are stored for the SMS conversation using
      [Twilio Cookies](https://www.twilio.com/blog/2014/07/the-definitive-guide-to-sms-conversation-tracking.html)
      a few steps later.

      ---

      **See Also:**
      * [Fuzzily Gem Usage](//github.com/mezis/fuzzily#usage)

  .step(
    data-title="Multiple Partial Match",
    data-file='lib/matchers/multiple_partial_match.rb',
    data-highlight='2-10')
    :markdown
      ## Finding Multiple Partial Employee Matches

      At this point we have already tried to use the user's query as an exact employee match
      and a single partial match. Now we'll try to get a partial match that returns
      more than one result. Just like in the previous scenario, we'll use
      [Twilio Cookies](https://www.twilio.com/blog/2014/07/the-definitive-guide-to-sms-conversation-tracking.html)
      to store suggestions. Then only difference here is that we need to store a Hash
      containing index suggestions so that the user can reply with a number that references
      one of the suggestions in order to get all the employee's information.

      The last scenario is so simple that a step won't be created for it. If none
      of the previous scenarios occur, it means that there is no employee in the
      database that matches the user's query. In that case, a reply will be sent
      to the user explaining that their query doesn't match any of the employees
      found on the database.

      ---

      **See Also:**
      * [Ruby on Rails cookies](//api.rubyonrails.org/classes/ActionDispatch/Cookies.html)

  .step(
    data-title="Storing Suggestions With Cookies",
    data-file='lib/suggestion.rb')
    :markdown
      ## Storing Suggestions With Cookies

      When a user gets a partial match by searching the employee directory, we
      reply with one or more suggestions. We need to store this suggestions, so the
      next time the user sends an SMS we know this is not a query for a new employee,
      but a selection of one of the suggestions.
      
      We'll use [Twilio Cookies][Twilio Cookies] to store suggestions. They will allow
      you to keep track of an SMS conversation between multiple numbers and your Twilio
      powered application.

      [Twilio Cookies]: https://www.twilio.com/blog/2014/07/the-definitive-guide-to-sms-conversation-tracking.html

  .step
    :markdown
      ## Where to next?

      That's it! We have just implemented employee directory using Ruby on Rails.
      Now you can get your employee's information by texting a Twilio number.

      If you're a Ruby developer working with Twilio, you might also enjoy these
      tutorials:

      [**Browser-Calls**](//www.twilio.com/docs/tutorials/walkthrough/browser-calls/ruby/rails)

      Learn how to use Twilio Client to make browser-to-phone and browser-to-browser calls with ease.

      [**ETA-Notifications**](//www.twilio.com/docs/tutorials/walkthrough/eta-notifications/ruby/rails)

      Learn how to implement ETA Notifications using Ruby on Rails and Twilio.

      Thanks for checking this tutorial out! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
